(()=>{"use strict";function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function e(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var n=function(){function n(t,i){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),e(this,"_x",0),e(this,"_y",0),this._x=t,this._y=i}var i,r,o;return i=n,o=[{key:"random",value:function(){return new n(Math.random(),Math.random()).normalize()}},{key:"distance",value:function(t,e){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))}}],(r=[{key:"x",get:function(){return this._x}},{key:"y",get:function(){return this._y}},{key:"sqrMagnitude",value:function(){return Math.pow(this.x,2)+Math.pow(this.y,2)}},{key:"magnitude",value:function(){return Math.sqrt(Math.pow(this.x,2)+Math.pow(this.y,2))}},{key:"normalize",value:function(){var t=this.magnitude();return new n(this.x/t,this.y/t)}},{key:"scale",value:function(t){return new n(this.x*t,this.y*t)}},{key:"add",value:function(t){return new n(this.x+t.x,this.y+t.y)}},{key:"rotate",value:function(t){var e=t*Math.PI/180;return new n(this.x*Math.cos(e)-Math.sin(e)*this.y,this.x*Math.sin(e)+this.y*Math.cos(e))}},{key:"toString",value:function(){return"Vector2(x: ".concat(this.x,", y: ").concat(this.y,")")}}])&&t(i.prototype,r),o&&t(i,o),n}();e(n,"ZERO",new n(0,0));const i=n;function r(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e,n,i){var r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0;e.ready&&(t.save(),t.translate(n.x,n.y),t.rotate(r*Math.PI/180),t.translate(-n.x,-n.y),t.drawImage(e.texture,n.x-i.x/2,n.y-i.y/2,i.x,i.y),t.restore())}var s=function(){function t(e,n){var i=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),o(this,"size",void 0),o(this,"el",void 0),o(this,"ready",!1),this.el=new Image,this.el.src=e,this.el.addEventListener("load",(function(){i.ready=!0}))}var e,n;return e=t,(n=[{key:"texture",get:function(){return this.el}}])&&r(e.prototype,n),t}();function u(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function l(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var h=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),l(this,"scaleX",void 0),l(this,"scaleY",void 0),this.scaleX=e,this.scaleY=n}var e,n;return e=t,(n=[{key:"translate",value:function(t){return new i(t.x*this.scaleX,t.y*this.scaleY)}},{key:"translateValueX",value:function(t){return t*this.scaleX}},{key:"translateValueY",value:function(t){return t*this.scaleY}}])&&u(e.prototype,n),t}();function c(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function f(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function d(t,e,n){return e&&f(t.prototype,e),n&&f(t,n),t}function y(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var v=function(){function t(){c(this,t),y(this,"particles",void 0),this.particles=[]}return d(t,[{key:"update",value:function(t,e){this.particles=this.particles.filter((function(n){return n.update(t,e),n.remainingTime>0}))}},{key:"add",value:function(t){this.particles.push(t)}}]),t}(),p=function(){function t(e,n){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:.1,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:10;c(this,t),y(this,"position",void 0),y(this,"_rate",.1),y(this,"_elapsed",0),y(this,"_count",10),y(this,"_container",void 0),y(this,"_particleGenerator",void 0),y(this,"_predicate",void 0),this._container=new v,this._particleGenerator=e,this._predicate=n,this._count=r,this._rate=i}return d(t,[{key:"draw",value:function(t,e,n){this._container.particles.forEach((function(i){i.draw(t,e,n)}))}},{key:"update",value:function(t,e){if(this._predicate(e)&&(this._elapsed+=t,this._elapsed>this._rate)){this._elapsed-=this._rate;for(var n=0;n<this._count;n++)this._container.add(new g(this.position,this._particleGenerator.velocity(e),this._particleGenerator.lifetime(e),this._particleGenerator.rotation(e),this._particleGenerator.texture(e),this._particleGenerator.size(e)))}this._container.update(t,e)}}]),t}(),g=function(){function t(e,n,i,r,o,a){c(this,t),y(this,"_center",void 0),y(this,"_direction",void 0),y(this,"_velocity",void 0),y(this,"_lifetime",void 0),y(this,"_rotation",void 0),y(this,"_elapsedLifetime",void 0),y(this,"_texture",void 0),y(this,"_size",void 0),this._center=e,this._velocity=n,this._lifetime=i,this._rotation=r,this._texture=o,this._size=a,this._elapsedLifetime=0}return d(t,[{key:"draw",value:function(t,e,n){t.globalAlpha=1-this._elapsedLifetime/this._lifetime,a(t,this._texture,n.translate(this._center),n.translate(this._size),this._rotation),t.globalAlpha=1}},{key:"velocity",get:function(){return this._velocity}},{key:"direction",get:function(){return this._direction}},{key:"center",get:function(){return this._center}},{key:"remainingTime",get:function(){return this._lifetime-this._elapsedLifetime}},{key:"update",value:function(t,e){this._elapsedLifetime+=t,this._center=this._center.add(this._velocity.scale(t))}}]),t}();function m(t,e,n){var r=new i(n.x-e.x,n.y-e.y),o=new i(e.x-t.center.x,e.y-t.center.y),a=-2*(r.x*o.x+r.y*o.y),s=2*(r.x*r.x+r.y*r.y),u=Math.sqrt(a*a-2*s*(o.x*o.x+o.y*o.y-t.radius*t.radius));if(isNaN(u))return!1;var l=(a-u)/s,h=(a+u)/s;return l<=1&&l>=0||h<=1&&h>=0}function w(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var _=new(function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n;return e=t,(n=[{key:"gaussian",value:function(){for(var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:6,e=0,n=0;n<t;n++)e+=Math.random();return e/t}}])&&w(e.prototype,n),t}());function b(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function x(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var k=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),x(this,"_center",void 0),x(this,"_radius",void 0),this._center=e,this._radius=n}var e,n;return e=t,(n=[{key:"center",get:function(){return this._center}},{key:"radius",get:function(){return this._radius}}])&&b(e.prototype,n),t}();function T(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function E(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function C(t,e,n){return e&&E(t.prototype,e),n&&E(t,n),t}function P(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var M=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;T(this,t),P(this,"_rotationOffset",void 0),P(this,"tex",new s("assets/Smoke.png",new i(32,32))),P(this,"_size",new i(.75,.75)),this._rotationOffset=e}return C(t,[{key:"texture",value:function(t){return this.tex}},{key:"size",value:function(t){return this._size}},{key:"velocity",value:function(t){var e=t.lander.rotationVector,n=100*_.gaussian(12)-50;return(e=e.rotate(n+this._rotationOffset)).scale(-5*_.gaussian(12))}},{key:"lifetime",value:function(t){return 5+_.gaussian(12)}},{key:"rotation",value:function(t){return 0}}]),t}(),O=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;T(this,t),P(this,"tex",new s("assets/Fire.png",new i(32,32))),P(this,"_size",new i(1,1)),this._rotationOffset=e}return C(t,[{key:"texture",value:function(t){return this.tex}},{key:"size",value:function(t){return this._size}},{key:"velocity",value:function(t){var e=t.lander.rotationVector,n=360*Math.random();return(e=e.rotate(n)).scale(-20*_.gaussian(12))}},{key:"lifetime",value:function(t){return 5+_.gaussian(12)}},{key:"rotation",value:function(t){return 0}}]),t}(),S=function(){function t(e,n,r){var o=this;T(this,t),P(this,"size",void 0),P(this,"texture",void 0),P(this,"frozen",void 0),P(this,"thrustEmitter",void 0),P(this,"leftRotationEmitter",void 0),P(this,"rightRotationEmitter",void 0),P(this,"explosionEmitter",void 0),P(this,"_position",void 0),P(this,"_velocity",void 0),P(this,"_rotationVector",void 0),P(this,"_rotation",void 0),P(this,"_explosionCount",0),P(this,"_isExploding",!1),P(this,"fuel",100),P(this,"crashed",!1),P(this,"thrusting",!1),P(this,"turningLeft",!1),P(this,"turningRight",!1),this.texture=n,this.size=r,this.frozen=!1,this._position=e,this._velocity=new i(0,0),this._rotationVector=new i(0,-1),this._rotation=0,this.thrustEmitter=new p(new M,(function(t){return t.lander.thrusting&&t.lander.fuel>0}),.05,10),this.leftRotationEmitter=new p(new M(90),(function(t){return t.lander.turningLeft&&t.lander.fuel>0}),.05,5),this.rightRotationEmitter=new p(new M(-90),(function(t){return t.lander.turningRight&&t.lander.fuel>0}),.05,5),this.explosionEmitter=new p(new O,(function(t){return o._isExploding}),.1,400),this.positionEmitters()}return C(t,[{key:"draw",value:function(t,e,n){e.lander.crashed||a(t,this.texture,n.translate(this._position),n.translate(this.size),this._rotation),this.thrustEmitter.draw(t,e,n),this.leftRotationEmitter.draw(t,e,n),this.rightRotationEmitter.draw(t,e,n),this.explosionEmitter.draw(t,e,n)}},{key:"debugDraw",value:function(t,e,n){t.beginPath(),t.strokeStyle="#ffffff";var r=n.translate(this._position);t.arc(r.x,r.y,n.translate(new i(4,0)).x,0,2*Math.PI),t.stroke();var o=n.translate(this._position),a=n.translate(this._rotationVector.scale(5));t.beginPath(),this._rotation%360<5&&this._rotation%360>-5?t.strokeStyle="#00ff00":t.strokeStyle="#ff0000",t.lineTo(o.x,o.y),t.lineTo(o.x+a.x,o.y+a.y),t.stroke();var s=n.translate(this._velocity.normalize().scale(5));t.beginPath(),this._velocity.sqrMagnitude()<4?t.strokeStyle="#0000ff":t.strokeStyle="#ff0000",t.lineTo(o.x,o.y),t.lineTo(o.x+s.x,o.y+s.y),t.stroke()}},{key:"positionEmitters",value:function(){this.thrustEmitter.position=this._position.add(this._rotationVector.scale(-3)),this.leftRotationEmitter.position=this._position.add(this._rotationVector.rotate(70).scale(-3.5)),this.rightRotationEmitter.position=this._position.add(this._rotationVector.rotate(-70).scale(-3.5)),this.explosionEmitter.position=this._position}},{key:"update",value:function(t,e){if(this._isExploding&&this._explosionCount++,this._explosionCount>5&&(this._isExploding=!1),this.thrustEmitter.update(t,e),this.leftRotationEmitter.update(t,e),this.rightRotationEmitter.update(t,e),this.explosionEmitter.update(t,e),!this.frozen){this.turningLeft&&this.fuel>0&&this.rotate(t,e,-1),this.turningRight&&this.fuel>0&&this.rotate(t,e,1),this._velocity=this._velocity.add(e.config.gravity.scale(t)),this.thrusting&&this.fuel>0&&(this._velocity=this._velocity.add(this._rotationVector.scale(t*e.config.thrustCoefficient)),this.fuel-=e.config.fuelConsumption*t),this.fuel<0&&(this.fuel=0,e.commands.execute("fuelExpired",e)),this._position=this._position.add(this._velocity.scale(t)),this.positionEmitters();for(var n=0;n<e.terrain.points.length-1;n++)if(m(new k(this._position,4),e.terrain.points[n],e.terrain.points[n+1])){if(this.velocity.sqrMagnitude()<=4&&(this.rotation<5||this.rotation>355))for(var i=0;i<e.safeZones.length;i++)if(e.terrain.points[n]==e.safeZones[i][0]&&e.terrain.points[n+1]==e.safeZones[i][1])return void e.commands.execute("safeLanding",e);e.commands.execute("crashLanding",e),this._isExploding=!0}(this.position.x>110||this.position.x<-10)&&(e.commands.execute("crashLanding",e),this._isExploding=!0)}}},{key:"rotate",value:function(t,e,n){this.fuel-=e.config.fuelConsumption*t*.5,this._rotation+=n*e.config.theta*t,this._rotationVector=this._rotationVector.rotate(n*e.config.theta*t)}},{key:"velocity",get:function(){return this._velocity}},{key:"rotation",get:function(){return(this._rotation%360+360)%360}},{key:"rotationVector",get:function(){return this._rotationVector}},{key:"position",get:function(){return this._position}},{key:"freeze",value:function(){this.frozen=!0,this._velocity=i.ZERO}}]),t}();function z(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return L(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?L(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var i=0,r=function(){};return{s:r,n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}function L(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}function R(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function j(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function V(t,e,n){return e&&j(t.prototype,e),n&&j(t,n),t}function A(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var D=function(){function t(){R(this,t),A(this,"_wasPressed",!1),A(this,"_lastPressed",Date.now()),A(this,"_onStateChanged",new Set),A(this,"_onKeyUp",new Set),A(this,"_onKeyDown",new Set)}return V(t,[{key:"update",value:function(t,e){if(this._wasPressed!=t){var n;n=t?this._onKeyDown:this._onKeyUp;var i,r=Date.now(),o=z(n);try{for(o.s();!(i=o.n()).done;)(0,i.value)(t,r-this._lastPressed,e)}catch(t){o.e(t)}finally{o.f()}var a,s=z(this._onStateChanged);try{for(s.s();!(a=s.n()).done;)(0,a.value)(t,r-this._lastPressed,e)}catch(t){s.e(t)}finally{s.f()}this._lastPressed=r,this._wasPressed=!this._wasPressed}}},{key:"addUp",value:function(t){this._onKeyUp.add(t)}},{key:"addDown",value:function(t){this._onKeyDown.add(t)}},{key:"addChanged",value:function(t){this._onStateChanged.add(t)}}]),t}(),F=function(){function t(){R(this,t),A(this,"handlers",void 0),A(this,"descriptions",void 0),window.addEventListener("keydown",this.updateDown.bind(this)),window.addEventListener("keyup",this.updateUp.bind(this)),this.handlers=new Map}return V(t,[{key:"registerHandler",value:function(t,e){var n;this.handlers.has(t)?console.warn("Key handler registered twice for keyCode ".concat(t)):(this.handlers.set(t,new D),null===(n=this.descriptions)||void 0===n||n.set(t,e))}},{key:"bindUp",value:function(t,e){this.handlers.get(t).addUp(e)}},{key:"bindDown",value:function(t,e){this.handlers.get(t).addDown(e)}},{key:"bindChanged",value:function(t,e){this.handlers.get(t).addChanged(e)}},{key:"updateDown",value:function(t){this.handlers.has(t.key)&&(t.preventDefault(),this.handlers.get(t.key).update(!0,{alt:t.altKey,shift:t.shiftKey,ctrl:t.ctrlKey}))}},{key:"updateUp",value:function(t){this.handlers.has(t.key)&&(t.preventDefault(),this.handlers.get(t.key).update(!1,{alt:t.altKey,shift:t.shiftKey,ctrl:t.ctrlKey}))}},{key:"clear",value:function(){this.handlers=new Map}},{key:"remove",value:function(t){this.handlers.delete(t)}}]),t}();function K(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function U(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function q(t,e,n){return e&&U(t.prototype,e),n&&U(t,n),t}function I(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Z=function(){function t(e,n){K(this,t),I(this,"_name",void 0),I(this,"_action",void 0),this._name=e,this._action=n}return q(t,[{key:"name",get:function(){return this._name}},{key:"invoke",value:function(t){this._action(t)}}]),t}(),X=function(){function t(){K(this,t),I(this,"commands",void 0),this.commands=new Map}return q(t,[{key:"createCommand",value:function(t,e){this.commands.set(t,new Z(t,e))}},{key:"execute",value:function(t,e){this.commands.has(t)?this.commands.get(t).invoke(e):console.warn("Attempting to invoke non-existent command ".concat(t))}}]),t}();function G(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var Y=function(){function t(e,n,r,o){var a,s;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),s=void 0,(a="points")in this?Object.defineProperty(this,a,{value:s,enumerable:!0,configurable:!0,writable:!0}):this[a]=s,this.points=[r,o];for(var u=0;u<e;u++)for(var l=this.points.length,h=0;h<l-1;h++){var c=new i((this.points[2*h].x+this.points[2*h+1].x)/2,(this.points[2*h].y+this.points[2*h+1].y)/2);c=c.add(new i(0,_.gaussian(12)*n)),this.points.splice(2*h+1,0,c)}}var e,n;return e=t,(n=[{key:"insertSafeZone",value:function(t,e,n){for(var r=t+n/2,o=r+(e-n/2-r)*Math.random(),a=0,s=this.points[0];s.x<o;)s=this.points[++a];var u=s;a++,s=this.points[a];for(var l=0;s.x<o+n;)l=s.x,this.points.splice(a,1),s=this.points[a];return this.points[a]=new i(l,u.y),[u,this.points[a]]}}])&&G(e.prototype,n),t}();function H(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function N(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var W=function(){function t(e,n){var i=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),N(this,"el",void 0),N(this,"ready",!1),N(this,"continue",!1),N(this,"loop",!1),N(this,"_playing",!1),N(this,"cutoff",0),this.el=new Audio(e),this.el.addEventListener("load",(function(){i.ready=!0})),n&&(this.loop=!0,this.cutoff=n)}var e,n;return e=t,(n=[{key:"play",value:function(){var t=this;this.el.play(),this.continue=!0,this._playing=!0,this.loop?setTimeout((function(){t.continue&&(t.el.currentTime=0,t.playRec())}),1e3*this.cutoff):setTimeout((function(){return t._playing=!1}),1e3*this.el.duration)}},{key:"playRec",value:function(){var t=this;setTimeout((function(){t.continue&&(t.el.currentTime=0,t.playRec())}),1e3*this.cutoff)}},{key:"stop",value:function(){this.el.pause(),this.continue=!1,this._playing=!1,this.el.currentTime=0}},{key:"playing",get:function(){return this._playing}}])&&H(e.prototype,n),t}(),B=document.getElementById("canvas"),$=B.getContext("2d"),J=new i(100,100),Q=new s("assets/Lander.png",new i(500,500)),tt=Math.min(window.innerWidth,window.innerHeight);B.width=tt,B.height=tt;var et=new h(tt/J.x,tt/J.y);window.addEventListener("resize",(function(){tt=Math.min(window.innerWidth,window.innerHeight),B.width=tt,B.height=tt,et=new h(tt/J.x,tt/J.y),console.log("Resizing to ".concat(tt,"px."))}));var nt,it,rt,ot,at=new Array,st=new Array,ut=new i(5,5),lt=new i(5,7.5),ht=new i(5,10),ct=0;function ft(t){return function e(n){var i=n-ct;ct=n,function(t,e){for(var n=0;n<st.length;n++)st[n].update(t,e)}(i/1e3,t),function(t){$.clearRect(0,0,tt,tt),function(t,e,n){t.beginPath(),t.lineTo(n.translateValueX(0),n.translateValueY(100)),t.strokeStyle="#ffffff",t.fillStyle="#ffffff";for(var i=1;i<e.points.length;i++){var r=n.translate(e.points[i]);t.lineTo(r.x,r.y)}t.lineTo(n.translateValueX(100),n.translateValueY(100)),t.fill()}($,t.terrain,et);for(var e=0;e<at.length;e++)at[e].draw($,t,et);!function(t,e){var n=et.translateValueX(2);t.font="".concat(n,"px Arial");var i=e.lander.fuel;t.fillStyle=i>0?"#00ff00":"#ffffff";var r=et.translate(ut);t.fillText("Fuel: ".concat(i.toFixed(2),"L"),r.x,r.y);var o=e.lander.rotation;t.fillStyle=o<5||o>355?"#00ff00":"#ffffff";var a=et.translate(lt);t.fillText("Angle: ".concat(o.toFixed(2),"°"),a.x,a.y);var s=e.lander.velocity.magnitude();t.fillStyle=s<2?"#00ff00":"#ffffff";var u=et.translate(ht);t.fillText("Velocity: ".concat(s.toFixed(2)," m/s"),u.x,u.y),t.fillStyle="#ffffff"}($,t)}(t),requestAnimationFrame(e)}}!function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=new S(new i(J.x/2,0),Q,new i(10,10));t.lander=n,at.push(n),st.push(n);for(var r=new Y(5,15,new i(0,70),new i(100,70)),o=[],a=3-e,s=10,u=90,l=(u-s)/a,h=0;h<a;h++)o.push(r.insertSafeZone(s+l*h,s+l*(h+1),10*a));t.terrain=r,t.safeZones=o,requestAnimationFrame(ft(t))}((ot={terrain:void 0,lander:void 0,safeZones:void 0,commands:void 0,keys:void 0,config:{fuelConsumption:20,thrustCoefficient:10,theta:90,gravity:new i(0,1)},sounds:{mainThruster:new W("assets/mainthruster.wav",4),subThruster:new W("assets/subthruster.wav",4),explosion:new W("assets/explosion.wav"),landing:new W("assets/landing.wav"),noFuel:new W("assets/nofuel.wav",1)}},ot.commands=((nt=new X).createCommand("enableThrust",(function(t){t.lander.thrusting=!0,t.lander.fuel>0?t.sounds.mainThruster.play():t.sounds.noFuel.play()})),nt.createCommand("disableThrust",(function(t){t.lander.thrusting=!1,t.sounds.mainThruster.stop(),t.sounds.noFuel.stop()})),nt.createCommand("fuelExpired",(function(t){t.sounds.mainThruster.playing&&(t.sounds.mainThruster.stop(),t.sounds.noFuel.play()),t.sounds.subThruster.playing&&(t.sounds.subThruster.stop(),t.sounds.noFuel.play())})),nt.createCommand("beginTurnLeft",(function(t){t.lander.turningLeft=!0,t.lander.fuel>0?t.sounds.subThruster.play():t.sounds.noFuel.play()})),nt.createCommand("endTurnLeft",(function(t){t.sounds.subThruster.stop(),t.sounds.noFuel.stop(),t.lander.turningLeft=!1})),nt.createCommand("beginTurnRight",(function(t){t.lander.fuel>0?t.sounds.subThruster.play():t.sounds.noFuel.play(),t.lander.turningRight=!0})),nt.createCommand("endTurnRight",(function(t){t.sounds.subThruster.stop(),t.sounds.noFuel.stop(),t.lander.turningRight=!1})),nt.createCommand("safeLanding",(function(t){t.sounds.landing.play(),t.lander.freeze()})),nt.createCommand("crashLanding",(function(t){t.sounds.explosion.play(),t.lander.crashed=!0,t.lander.freeze()})),nt),ot.keys=(it=ot,(rt=new F).registerHandler(" "),rt.registerHandler("q"),rt.registerHandler("e"),rt.bindDown(" ",(function(){return it.commands.execute("enableThrust",it)})),rt.bindUp(" ",(function(){return it.commands.execute("disableThrust",it)})),rt.bindDown("q",(function(){return it.commands.execute("beginTurnLeft",it)})),rt.bindUp("q",(function(){return it.commands.execute("endTurnLeft",it)})),rt.bindDown("e",(function(){return it.commands.execute("beginTurnRight",it)})),rt.bindUp("e",(function(){return it.commands.execute("endTurnRight",it)})),rt),ot))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,