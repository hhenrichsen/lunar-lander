(()=>{"use strict";function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var e=function(){function e(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e)}var n,i;return n=e,(i=[{key:"load",value:function(t,e){var n=document.createElement("img");n.src="assets/Lander.png",n.width=250,t.appendChild(n);var i=document.createElement("h1");i.innerText="Lunar Lander",t.appendChild(i);var r=document.createElement("a");r.href="#",r.addEventListener("click",(function(){e.router.requestTransition("play",{level:1})})),r.innerText="Play",t.appendChild(r);var o=document.createElement("a");o.href="#",o.addEventListener("click",(function(){e.router.requestTransition("controls")})),o.innerText="Controls",t.appendChild(o);var a=document.createElement("a");a.href="#",a.addEventListener("click",(function(){e.router.requestTransition("scores")})),a.innerText="High Scores",t.appendChild(a);var s=document.createElement("a");s.href="#",s.addEventListener("click",(function(){e.router.requestTransition("credits")})),s.innerText="Credits",t.appendChild(s)}},{key:"init",value:function(t){t.localState=null}},{key:"canTransition",value:function(t){return!0}}])&&t(n.prototype,i),e}();function n(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var r=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),i(this,"_x",0),i(this,"_y",0),this._x=e,this._y=n}var e,r,o;return e=t,o=[{key:"random",value:function(){return new t(Math.random(),Math.random()).normalize()}},{key:"distance",value:function(t,e){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))}}],(r=[{key:"x",get:function(){return this._x}},{key:"y",get:function(){return this._y}},{key:"sqrMagnitude",value:function(){return Math.pow(this.x,2)+Math.pow(this.y,2)}},{key:"magnitude",value:function(){return Math.sqrt(Math.pow(this.x,2)+Math.pow(this.y,2))}},{key:"normalize",value:function(){var e=this.magnitude();return new t(this.x/e,this.y/e)}},{key:"scale",value:function(e){return new t(this.x*e,this.y*e)}},{key:"add",value:function(e){return new t(this.x+e.x,this.y+e.y)}},{key:"rotate",value:function(e){var n=e*Math.PI/180;return new t(this.x*Math.cos(n)-Math.sin(n)*this.y,this.x*Math.sin(n)+this.y*Math.cos(n))}},{key:"toString",value:function(){return"Vector2(x: ".concat(this.x,", y: ").concat(this.y,")")}}])&&n(e.prototype,r),o&&n(e,o),t}();i(r,"ZERO",new r(0,0));const o=r;function a(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function s(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function u(t,e,n,i){var r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0;e.ready&&(t.save(),t.translate(n.x,n.y),t.rotate(r*Math.PI/180),t.translate(-n.x,-n.y),t.drawImage(e.texture,n.x-i.x/2,n.y-i.y/2,i.x,i.y),t.restore())}var l=function(){function t(e,n){var i=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),s(this,"size",void 0),s(this,"el",void 0),s(this,"ready",!1),this.el=new Image,this.el.src=e,this.el.addEventListener("load",(function(){i.ready=!0}))}var e,n;return e=t,(n=[{key:"texture",get:function(){return this.el}}])&&a(e.prototype,n),t}();function c(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function h(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function f(t,e,n){return e&&h(t.prototype,e),n&&h(t,n),t}function d(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var y=function(){function t(){c(this,t),d(this,"particles",void 0),this.particles=[]}return f(t,[{key:"update",value:function(t,e){this.particles=this.particles.filter((function(n){return n.update(t,e),n.remainingTime>0}))}},{key:"add",value:function(t){this.particles.push(t)}}]),t}(),v=function(){function t(e,n){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:.1,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:10;c(this,t),d(this,"position",void 0),d(this,"_rate",.1),d(this,"_elapsed",0),d(this,"_count",10),d(this,"_container",void 0),d(this,"_particleGenerator",void 0),d(this,"_predicate",void 0),this._container=new y,this._particleGenerator=e,this._predicate=n,this._count=r,this._rate=i}return f(t,[{key:"draw",value:function(t,e,n){this._container.particles.forEach((function(i){i.draw(t,e,n)}))}},{key:"update",value:function(t,e){if(this._predicate(e)&&(this._elapsed+=t,this._elapsed>this._rate)){this._elapsed-=this._rate;for(var n=0;n<this._count;n++)this._container.add(new p(this.position,this._particleGenerator.velocity(e),this._particleGenerator.lifetime(e),this._particleGenerator.rotation(e),this._particleGenerator.texture(e),this._particleGenerator.size(e)))}this._container.update(t,e)}}]),t}(),p=function(){function t(e,n,i,r,o,a){c(this,t),d(this,"_center",void 0),d(this,"_direction",void 0),d(this,"_velocity",void 0),d(this,"_lifetime",void 0),d(this,"_rotation",void 0),d(this,"_elapsedLifetime",void 0),d(this,"_texture",void 0),d(this,"_size",void 0),this._center=e,this._velocity=n,this._lifetime=i,this._rotation=r,this._texture=o,this._size=a,this._elapsedLifetime=0}return f(t,[{key:"draw",value:function(t,e,n){t.globalAlpha=1-this._elapsedLifetime/this._lifetime,u(t,this._texture,n.translate(this._center),n.translate(this._size),this._rotation),t.globalAlpha=1}},{key:"velocity",get:function(){return this._velocity}},{key:"direction",get:function(){return this._direction}},{key:"center",get:function(){return this._center}},{key:"remainingTime",get:function(){return this._lifetime-this._elapsedLifetime}},{key:"update",value:function(t,e){this._elapsedLifetime+=t,this._center=this._center.add(this._velocity.scale(t))}}]),t}();function g(t,e,n){var i=new o(n.x-e.x,n.y-e.y),r=new o(e.x-t.center.x,e.y-t.center.y),a=-2*(i.x*r.x+i.y*r.y),s=2*(i.x*i.x+i.y*i.y),u=Math.sqrt(a*a-2*s*(r.x*r.x+r.y*r.y-t.radius*t.radius));if(isNaN(u))return!1;var l=(a-u)/s,c=(a+u)/s;return l<=1&&l>=0||c<=1&&c>=0}function m(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var w=new(function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n;return e=t,(n=[{key:"gaussian",value:function(){for(var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:6,e=0,n=0;n<t;n++)e+=Math.random();return e/t-.5}}])&&m(e.prototype,n),t}());function b(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function _(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var k=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),_(this,"_center",void 0),_(this,"_radius",void 0),this._center=e,this._radius=n}var e,n;return e=t,(n=[{key:"center",get:function(){return this._center}},{key:"radius",get:function(){return this._radius}}])&&b(e.prototype,n),t}();function x(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function S(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function T(t,e,n){return e&&S(t.prototype,e),n&&S(t,n),t}function E(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var P=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;x(this,t),E(this,"_rotationOffset",void 0),E(this,"tex",new l("assets/Smoke.png",new o(32,32))),E(this,"_size",new o(.425,.425)),this._rotationOffset=e}return T(t,[{key:"texture",value:function(t){return this.tex}},{key:"size",value:function(t){return this._size}},{key:"velocity",value:function(t){var e=t.localState.lander.rotationVector,n=100*w.gaussian(12);return(e=e.rotate(n+this._rotationOffset)).scale(-5*w.gaussian(12))}},{key:"lifetime",value:function(t){return 5+w.gaussian(12)}},{key:"rotation",value:function(t){return 0}}]),t}(),C=function(){function t(){x(this,t),E(this,"tex",new l("assets/Fire.png",new o(32,32))),E(this,"_size",new o(.425,.425))}return T(t,[{key:"texture",value:function(t){return this.tex}},{key:"size",value:function(t){return this._size}},{key:"velocity",value:function(t){var e=t.localState.lander.rotationVector,n=360*Math.random();return(e=e.rotate(n)).scale(-20*w.gaussian(12))}},{key:"lifetime",value:function(t){return 2+w.gaussian(12)}},{key:"rotation",value:function(t){return 0}}]),t}(),z=function(){function t(e,n,i){var r=this;x(this,t),E(this,"size",void 0),E(this,"texture",void 0),E(this,"_frozen",void 0),E(this,"thrustEmitter",void 0),E(this,"leftRotationEmitter",void 0),E(this,"rightRotationEmitter",void 0),E(this,"explosionEmitter",void 0),E(this,"_position",void 0),E(this,"_velocity",void 0),E(this,"_rotationVector",void 0),E(this,"_rotation",void 0),E(this,"_explosionCount",0),E(this,"_isExploding",!1),E(this,"fuel",100),E(this,"crashed",!1),E(this,"thrusting",!1),E(this,"turningLeft",!1),E(this,"turningRight",!1),this.texture=n,this.size=i,this._frozen=!1,this._position=e,this._velocity=new o(0,0),this._rotationVector=new o(0,-1),this._rotation=0,this.thrustEmitter=new v(new P,(function(t){return t.localState.lander.thrusting&&t.localState.lander.fuel>0&&!r._frozen}),.03,5),this.leftRotationEmitter=new v(new P(90),(function(t){return t.localState.lander.turningLeft&&t.localState.lander.fuel>0&&!r._frozen}),.03,3),this.rightRotationEmitter=new v(new P(-90),(function(t){return t.localState.lander.turningRight&&t.localState.lander.fuel>0&&!r._frozen}),.03,3),this.explosionEmitter=new v(new C,(function(t){return r._isExploding}),.03,200),this.positionEmitters()}return T(t,[{key:"draw",value:function(t,e,n){e.localState.lander.crashed||u(t,this.texture,n.translate(this._position),n.translate(this.size),this._rotation),this.thrustEmitter.draw(t,e,n),this.leftRotationEmitter.draw(t,e,n),this.rightRotationEmitter.draw(t,e,n),this.explosionEmitter.draw(t,e,n)}},{key:"debugDraw",value:function(t,e,n){t.beginPath(),t.strokeStyle="#ffffff";var i=n.translate(this._position);t.arc(i.x,i.y,n.translate(new o(4,0)).x,0,2*Math.PI),t.stroke();var r=n.translate(this._position),a=n.translate(this._rotationVector.scale(5));t.beginPath(),this._rotation%360<5&&this._rotation%360>-5?t.strokeStyle="#00ff00":t.strokeStyle="#ff0000",t.lineTo(r.x,r.y),t.lineTo(r.x+a.x,r.y+a.y),t.stroke();var s=n.translate(this._velocity.normalize().scale(5));t.beginPath(),this._velocity.sqrMagnitude()<4?t.strokeStyle="#0000ff":t.strokeStyle="#ff0000",t.lineTo(r.x,r.y),t.lineTo(r.x+s.x,r.y+s.y),t.stroke()}},{key:"positionEmitters",value:function(){this.thrustEmitter.position=this._position.add(this._rotationVector.scale(-1.5)),this.leftRotationEmitter.position=this._position.add(this._rotationVector.rotate(70).scale(-1.75)),this.rightRotationEmitter.position=this._position.add(this._rotationVector.rotate(-70).scale(-1.75)),this.explosionEmitter.position=this._position}},{key:"update",value:function(t,e){if(this._isExploding&&(console.log("Explosion"),this._explosionCount++),this._explosionCount>5&&(this._isExploding=!1,this._explosionCount=0),this.thrustEmitter.update(t,e),this.leftRotationEmitter.update(t,e),this.rightRotationEmitter.update(t,e),this.explosionEmitter.update(t,e),!this._frozen){this.turningLeft&&this.fuel>0&&this.rotate(t,e,-1),this.turningRight&&this.fuel>0&&this.rotate(t,e,1),this._velocity=this._velocity.add(e.config.gravity.scale(t)),this.thrusting&&this.fuel>0&&(this._velocity=this._velocity.add(this._rotationVector.scale(t*e.config.thrustCoefficient)),this.fuel-=e.config.fuelConsumption*t),this.fuel<0&&(this.fuel=0,e.commands.execute("fuelExpired",e)),this._position=this._position.add(this._velocity.scale(t)),this.positionEmitters();for(var n=0;n<e.localState.terrain.points.length-1;n++)if(g(new k(this._position,2),e.localState.terrain.points[n],e.localState.terrain.points[n+1])){if(this.velocity.sqrMagnitude()<=4&&(this.rotation<5||this.rotation>355))for(var i=0;i<e.localState.safeZones.length;i++)if(e.localState.terrain.points[n]==e.localState.safeZones[i][0]&&e.localState.terrain.points[n+1]==e.localState.safeZones[i][1])return void e.commands.execute("safeLanding",e);e.commands.execute("crashLanding",e),this._isExploding=!0}(this.position.x>e.config.worldSize.x+10||this.position.x<-10||this.position.y>e.config.worldSize.y+10)&&(e.commands.execute("crashLanding",e),this._isExploding=!0)}}},{key:"rotate",value:function(t,e,n){this.fuel-=e.config.fuelConsumption*t*.5,this._rotation+=n*e.config.theta*t,this._rotationVector=this._rotationVector.rotate(n*e.config.theta*t)}},{key:"velocity",get:function(){return this._velocity}},{key:"rotation",get:function(){return(this._rotation%360+360)%360}},{key:"rotationVector",get:function(){return this._rotationVector}},{key:"position",get:function(){return this._position}},{key:"freeze",value:function(){this._frozen=!0,this._velocity=o.ZERO}},{key:"frozen",get:function(){return this._frozen}}]),t}();function O(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function L(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function R(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function j(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],i=!0,r=!1,o=void 0;try{for(var a,s=t[Symbol.iterator]();!(i=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);i=!0);}catch(t){r=!0,o=t}finally{try{i||null==s.return||s.return()}finally{if(r)throw o}}return n}}(t,e)||function(t,e){if(t){if("string"==typeof t)return M(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?M(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function M(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}var V=function(){function t(e,n,i,r){var a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:100;O(this,t),R(this,"points",void 0),this.points=[i,r];for(var s=0;s<e;s++){var u=this.points.length;n/=2;for(var l=0;l<u-1;l++){var c=new o((this.points[2*l].x+this.points[2*l+1].x)/2,(this.points[2*l].y+this.points[2*l+1].y)/2);c=c.add(new o(0,w.gaussian(12)*n)),c=new o(c.x,Math.min(c.y,a)),this.points.splice(2*l+1,0,c)}}}var e,n;return e=t,(n=[{key:"insertSafeZone",value:function(t,e,n){for(var i=t+n/2,r=i+(e-n/2-i)*Math.random(),a=0,s=this.points[0];s.x<r;)s=this.points[++a];var u=s;a++,s=this.points[a];for(var l=0;s.x<r+n;)l=s.x,this.points.splice(a,1),s=this.points[a];return this.points[a]=new o(l,u.y),[u,this.points[a]]}}])&&L(e.prototype,n),t}();function A(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function q(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var D=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),q(this,"scaleX",void 0),q(this,"scaleY",void 0),this.scaleX=e,this.scaleY=n,this.translate=this.translate.bind(this),this.translateValueX=this.translateValueX.bind(this),this.translateValueY=this.translateValueY.bind(this)}var e,n;return e=t,(n=[{key:"translate",value:function(t){return new o(t.x*this.scaleX,t.y*this.scaleY)}},{key:"translateValueX",value:function(t){return t*this.scaleX}},{key:"translateValueY",value:function(t){return t*this.scaleY}}])&&A(e.prototype,n),t}();function F(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function I(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function K(t){return(K="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function U(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function X(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function Y(t,e,n){return(Y="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var i=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=B(t)););return t}(t,e);if(i){var r=Object.getOwnPropertyDescriptor(i,e);return r.get?r.get.call(n):r.value}})(t,e,n||t)}function Z(t,e){return(Z=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function G(t,e){return!e||"object"!==K(e)&&"function"!=typeof e?H(t):e}function H(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function B(t){return(B=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function W(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var N=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Z(t,e)}(s,t);var e,n,i,r,a=(i=s,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=B(i);if(r){var n=B(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return G(this,t)});function s(){var t;U(this,s);for(var e=arguments.length,n=new Array(e),i=0;i<e;i++)n[i]=arguments[i];return W(H(t=a.call.apply(a,[this].concat(n))),"landerTexture",new l("assets/Lander.png",new o(500,500))),W(H(t),"fuelPosition",new o(5,5)),W(H(t),"anglePosition",new o(5,7.5)),W(H(t),"velocityPosition",new o(5,10)),t}return e=s,(n=[{key:"preLoad",value:function(t,e){Y(B(s.prototype),"setBounds",this).call(this,e.config.screenRatio,e.config.worldSize)}},{key:"postInit",value:function(t){var e=void 0!==t.router.transitionData?t.router.transitionData.level:1,n=new z(new o(t.config.worldSize.x/2,0),this.landerTexture,new o(5,5));this.drawables.push(n),this.ticking.push(n);for(var i=new V(8,500,new o(0,2*t.config.worldSize.y/3),new o(t.config.worldSize.x,2*t.config.worldSize.y/3),t.config.worldSize.y-10),r=[],a=3-e,s=(t.config.worldSize.x-10-10)/a,u=0;u<a;u++)r.push(i.insertSafeZone(10+s*u,10+s*(u+1),7.5*a));t.localState={safeZones:r,lander:n,terrain:i,running:!0}}},{key:"canTransition",value:function(t){return!0}},{key:"loop",value:function(t){var e=this;return function n(i){var r=i-e.lastTime;e.lastTime=i,e.update(r/1e3,t),e.draw(t),t.localState.running&&requestAnimationFrame(n)}}},{key:"update",value:function(t,e){for(var n=0;n<this.ticking.length;n++)this.ticking[n].update(t,e)}},{key:"draw",value:function(t){this.context.clearRect(0,0,this.canvas.width,this.canvas.height),function(t,e,n){t.beginPath(),t.lineTo(n.translateValueX(0),n.translateValueY(e.config.worldSize.y));var i=t.createLinearGradient(0,0,0,1e3);i.addColorStop(0,"#ffffff"),i.addColorStop(1,"#777777");for(var r=1;r<e.localState.terrain.points.length;r++){var o=n.translate(e.localState.terrain.points[r]);t.lineTo(o.x,o.y)}t.lineTo(n.translateValueX(e.config.worldSize.x),n.translateValueY(e.config.worldSize.y)),t.fillStyle=i,t.fill();for(var a=0;a<e.localState.safeZones.length;a++){t.strokeStyle="#f69205",t.lineWidth=n.translateValueY(.5),t.beginPath();var s=j(e.localState.safeZones[a].map(n.translate),2),u=s[0],l=s[1];t.lineTo(u.x,u.y),t.lineTo(l.x,l.y),t.stroke()}}(this.context,t,this.vcs);for(var e=0;e<this.drawables.length;e++)this.drawables[e].draw(this.context,t,this.vcs);this.drawText(this.context,t)}},{key:"drawText",value:function(t,e){var n=this.vcs.translateValueX(2);t.font="".concat(n,"px Arial");var i=e.localState.lander.fuel;t.fillStyle=i>0?"#00ff00":"#ffffff";var r=this.vcs.translate(this.fuelPosition);t.fillText("Fuel: ".concat(i.toFixed(2),"L"),r.x,r.y);var o=e.localState.lander.rotation;t.fillStyle=o<5||o>355?"#00ff00":"#ffffff";var a=this.vcs.translate(this.anglePosition);t.fillText("Angle: ".concat(o.toFixed(2),"°"),a.x,a.y);var s=e.localState.lander.velocity.magnitude();t.fillStyle=s<2?"#00ff00":"#ffffff";var u=this.vcs.translate(this.velocityPosition);t.fillText("Velocity: ".concat(s.toFixed(2)," m/s"),u.x,u.y),t.fillStyle="#ffffff"}}])&&X(e.prototype,n),s}(function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),I(this,"canvas",void 0),I(this,"context",void 0),I(this,"vcs",new D(0,0)),I(this,"drawables",[]),I(this,"ticking",[]),I(this,"lastTime",0),I(this,"screenRatio",void 0),I(this,"worldSize",void 0)}var e,n;return e=t,(n=[{key:"setBounds",value:function(t,e){this.screenRatio=t,this.worldSize=e}},{key:"load",value:function(t,e){this.preLoad(t,e);var n=document.createElement("canvas");this.canvas=n,n.width=this.worldSize.x,n.height=this.worldSize.y,n.id="canvas",t.appendChild(n),this.context=n.getContext("2d"),this.postLoad(t,e)}},{key:"preLoad",value:function(t,e){}},{key:"postLoad",value:function(t,e){}},{key:"init",value:function(t){var e=this;this.preInit(t),this.drawables=[],this.ticking=[],this.postInit(t),this.lastTime=performance.now(),requestAnimationFrame(this.loop(t)),window.addEventListener("resize",(function(){return e.resize()})),this.resize()}},{key:"preInit",value:function(t){}},{key:"postInit",value:function(t){}},{key:"resize",value:function(){window.innerWidth/this.screenRatio.x<window.innerHeight/this.screenRatio.y?(this.canvas.width=window.innerWidth,this.canvas.height=window.innerWidth*this.screenRatio.y/this.screenRatio.x):(this.canvas.width=window.innerHeight*this.screenRatio.x/this.screenRatio.y,this.canvas.height=window.innerHeight),this.vcs=new D(this.canvas.width/this.worldSize.x,this.canvas.height/this.worldSize.y)}}])&&F(e.prototype,n),t}());function $(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function J(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Q=function(){function t(e,n){var i=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),J(this,"el",void 0),J(this,"ready",!1),J(this,"continue",!1),J(this,"loop",!1),J(this,"_playing",!1),J(this,"cutoff",0),this.el=new Audio(e),this.el.addEventListener("load",(function(){i.ready=!0})),n&&(this.loop=!0,this.cutoff=n)}var e,n;return e=t,(n=[{key:"play",value:function(){var t=this;this.el.play(),this.continue=!0,this._playing=!0,this.loop?setTimeout((function(){t.continue&&(t.el.currentTime=0,t.playRec())}),1e3*this.cutoff):setTimeout((function(){return t._playing=!1}),1e3*this.el.duration)}},{key:"playRec",value:function(){var t=this;setTimeout((function(){t.continue&&(t.el.currentTime=0,t.playRec())}),1e3*this.cutoff)}},{key:"stop",value:function(){this.el.pause(),this.continue=!1,this._playing=!1,this.el.currentTime=0}},{key:"playing",get:function(){return this._playing}}])&&$(e.prototype,n),t}();function tt(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return et(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?et(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var i=0,r=function(){};return{s:r,n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}function et(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}function nt(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function it(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function rt(t,e,n){return e&&it(t.prototype,e),n&&it(t,n),t}function ot(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var at=function(){function t(){nt(this,t),ot(this,"_wasPressed",!1),ot(this,"_lastPressed",Date.now()),ot(this,"_onStateChanged",new Set),ot(this,"_onKeyUp",new Set),ot(this,"_onKeyDown",new Set)}return rt(t,[{key:"update",value:function(t,e){if(this._wasPressed!=t){var n;n=t?this._onKeyDown:this._onKeyUp;var i,r=Date.now(),o=tt(n);try{for(o.s();!(i=o.n()).done;)(0,i.value)(t,r-this._lastPressed,e)}catch(t){o.e(t)}finally{o.f()}var a,s=tt(this._onStateChanged);try{for(s.s();!(a=s.n()).done;)(0,a.value)(t,r-this._lastPressed,e)}catch(t){s.e(t)}finally{s.f()}this._lastPressed=r,this._wasPressed=!this._wasPressed}}},{key:"addUp",value:function(t){this._onKeyUp.add(t)}},{key:"addDown",value:function(t){this._onKeyDown.add(t)}},{key:"addChanged",value:function(t){this._onStateChanged.add(t)}}]),t}(),st=function(){function t(){nt(this,t),ot(this,"handlers",void 0),ot(this,"descriptions",void 0),window.addEventListener("keydown",this.updateDown.bind(this)),window.addEventListener("keyup",this.updateUp.bind(this)),this.handlers=new Map}return rt(t,[{key:"registerHandler",value:function(t,e){var n;this.handlers.has(t)?console.warn("Key handler registered twice for keyCode ".concat(t)):(this.handlers.set(t,new at),null===(n=this.descriptions)||void 0===n||n.set(t,e))}},{key:"bindUp",value:function(t,e){this.handlers.get(t).addUp(e)}},{key:"bindDown",value:function(t,e){this.handlers.get(t).addDown(e)}},{key:"bindChanged",value:function(t,e){this.handlers.get(t).addChanged(e)}},{key:"updateDown",value:function(t){this.handlers.has(t.key)&&(t.preventDefault(),this.handlers.get(t.key).update(!0,{alt:t.altKey,shift:t.shiftKey,ctrl:t.ctrlKey}))}},{key:"updateUp",value:function(t){this.handlers.has(t.key)&&(t.preventDefault(),this.handlers.get(t.key).update(!1,{alt:t.altKey,shift:t.shiftKey,ctrl:t.ctrlKey}))}},{key:"clear",value:function(){this.handlers=new Map}},{key:"remove",value:function(t){this.handlers.delete(t)}}]),t}();function ut(t,e,n,i,r){t.registerHandler(i,n),e.has("begin".concat(n))&&t.bindDown(i,(function(){return e.execute("begin".concat(n),r)})),e.has("end".concat(n))&&t.bindUp(i,(function(){return e.execute("end".concat(n),r)})),e.has("toggle".concat(n))&&t.bindChanged(i,(function(){return e.execute("toggle".concat(n),r)}))}function lt(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function ct(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function ht(t,e,n){return e&&ct(t.prototype,e),n&&ct(t,n),t}function ft(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var dt=function(){function t(e,n){lt(this,t),ft(this,"_name",void 0),ft(this,"_action",void 0),this._name=e,this._action=n}return ht(t,[{key:"name",get:function(){return this._name}},{key:"invoke",value:function(t){this._action(t)}}]),t}(),yt=function(){function t(){lt(this,t),ft(this,"commands",void 0),this.commands=new Map}return ht(t,[{key:"createCommand",value:function(t,e){this.commands.set(t,new dt(t,e))}},{key:"has",value:function(t){return this.commands.has(t)}},{key:"execute",value:function(t,e){this.commands.has(t)?this.commands.get(t).invoke(e):console.warn("Attempting to invoke non-existent command ".concat(t))}}]),t}();function vt(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var pt,gt,mt,wt,bt=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n;return e=t,(n=[{key:"load",value:function(t,e){var n=document.createElement("img");n.src="assets/Lander.png",n.width=250,t.appendChild(n);var i=document.createElement("p");i.innerText="Lunar Lander Clone by Hunter Henrichsen";var r=document.createElement("p");r.innerText="Montserrat Font from Google Fonts",t.appendChild(i),t.appendChild(r);var o=document.createElement("a");o.href="#",o.addEventListener("click",(function(){e.router.requestTransition("home")})),o.innerText="Back",t.appendChild(o)}},{key:"init",value:function(t){t.localState=null}},{key:"canTransition",value:function(t){return!0}}])&&vt(e.prototype,n),t}();(gt=new o(4/3,1),mt=gt.scale(100),(wt={commands:void 0,localState:null,keys:void 0,config:{fuelConsumption:20,thrustCoefficient:10,theta:90,gravity:new o(0,1),worldSize:mt,screenRatio:gt},sounds:{mainThruster:new Q("assets/mainthruster.wav",4),subThruster:new Q("assets/subthruster.wav",4),explosion:new Q("assets/explosion.wav"),landing:new Q("assets/landing.wav"),noFuel:new Q("assets/nofuel.wav",1)},router:{currentPage:void 0,transitionData:{},requestTransition:function(t,e){if(void 0!==this.router.pages[t]&&(void 0===this.router.currentPage||this.router.currentPage.canTransition(t))){this.router.currentPage=this.router.pages[t],this.router.transitionData=e;var n=document.getElementById("main");n.innerHTML="",n.classList.forEach((function(t){return n.classList.remove(t)})),n.classList.add(t),this.router.currentPage.load(n,this),this.localState=null,this.router.currentPage.init(this)}},pages:{home:new e,play:new N,credits:new bt}}}).router.requestTransition=wt.router.requestTransition.bind(wt),wt.commands=((pt=new yt).createCommand("beginThrust",(function(t){t.localState.lander.frozen||(t.localState.lander.thrusting=!0,t.localState.lander.fuel>0?t.sounds.mainThruster.play():t.sounds.noFuel.play())})),pt.createCommand("endThrust",(function(t){t.localState.lander.thrusting=!1,t.sounds.mainThruster.stop(),t.sounds.noFuel.stop()})),pt.createCommand("fuelExpired",(function(t){t.localState.lander.frozen||(t.sounds.mainThruster.playing&&(t.sounds.mainThruster.stop(),t.sounds.noFuel.play()),t.sounds.subThruster.playing&&(t.sounds.subThruster.stop(),t.sounds.noFuel.play()))})),pt.createCommand("beginTurnLeft",(function(t){t.localState.lander.frozen||(t.localState.lander.turningLeft=!0,t.localState.lander.fuel>0?t.sounds.subThruster.play():t.sounds.noFuel.play())})),pt.createCommand("endTurnLeft",(function(t){t.localState.lander.frozen||(t.sounds.subThruster.stop(),t.sounds.noFuel.stop(),t.localState.lander.turningLeft=!1)})),pt.createCommand("beginTurnRight",(function(t){t.localState.lander.frozen||(t.localState.lander.fuel>0?t.sounds.subThruster.play():t.sounds.noFuel.play(),t.localState.lander.turningRight=!0)})),pt.createCommand("endTurnRight",(function(t){t.localState.lander.frozen||(t.sounds.subThruster.stop(),t.sounds.noFuel.stop(),t.localState.lander.turningRight=!1)})),pt.createCommand("safeLanding",(function(t){t.sounds.landing.play(),t.localState.lander.freeze(),setTimeout((function(){t.localState.running=!1,t.router.requestTransition("play",{level:2})}),3e3)})),pt.createCommand("crashLanding",(function(t){t.sounds.mainThruster.stop(),t.sounds.subThruster.stop(),t.sounds.noFuel.stop(),t.sounds.explosion.play(),t.localState.lander.crashed=!0,t.localState.lander.freeze(),setTimeout((function(){t.localState.running=!1,t.router.requestTransition("home")}),3e3)})),pt),wt.keys=function(t){var e=new st;return ut(e,t.commands,"Thrust","ArrowUp",t),ut(e,t.commands,"TurnLeft","ArrowLeft",t),ut(e,t.commands,"TurnRight","ArrowRight",t),e}(wt),wt).router.requestTransition("home")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,